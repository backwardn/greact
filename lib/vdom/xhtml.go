package vdom

import (
	"bytes"
	"go/ast"
	"go/format"
	"strings"
	"text/template"

	"golang.org/x/net/html"
	"golang.org/x/net/html/atom"
)

type Node struct {
	Type      html.NodeType
	DataAtom  atom.Atom
	Data      string
	Namespace string
	Attr      []html.Attribute
	Children  []*Node
}

func Clone(n *html.Node, e *Node) {
	for c := n.FirstChild; c != nil; c = c.NextSibling {
		ch := &Node{
			Type:      c.Type,
			DataAtom:  c.DataAtom,
			Data:      c.Data,
			Namespace: c.Namespace,
			Attr:      make([]html.Attribute, len(c.Attr)),
		}
		copy(ch.Attr, c.Attr)
		e.Children = append(e.Children, ch)
		Clone(c, ch)
	}
}

func nonilExpr(x ...ast.Expr) []ast.Expr {
	var ls []ast.Expr
	for _, v := range x {
		if v != nil {
			ls = append(ls, v)
		}
	}
	return ls
}

// Compile compiles src which is a jsx like syntax for describing ui into a
// *Node which is a tree of virtual.
func Compile(src string) (*Node, error) {
	doc, err := html.Parse(strings.NewReader(src))
	if err != nil {
		return nil, err
	}
	o := &Node{
		DataAtom: doc.DataAtom,
		Data:     doc.Data,
	}
	Clone(doc, o)
	return o, nil
}

func formatNodeType(n html.NodeType) string {
	switch n {
	case html.ErrorNode:
		return "ErrorNode"
	case html.TextNode:
		return "TextNode"
	case html.DocumentNode:
		return "DocumentNode"
	case html.ElementNode:
		return "ElementNode"
	case html.CommentNode:
		return "CommentNode"
	case html.DoctypeNode:
		return "DoctypeNode"
	default:
		return "ErrorNode"
	}
}

const fnTpl = `// Code generated by vected DO NOT EDIT.
package {{.ctx.Package}}

import (
	"github.com/gernest/vected/lib/vdom"
	vp "github.com/gernest/vected/lib/props"
	"golang.org/x/net/html/atom"
	"golang.org/x/net/html"
)

// Render implements vected.Renderer interface.
func ({{.ctx.Recv}} {{.ctx.StructName}})Render(props vp.Props)*vdom.Node{
	return {{.node}}
}
`

var tpl = template.Must(template.New("n").Parse(fnTpl))

type Context struct {
	Package    string
	Recv       string
	StructName string
}

// GenerateRenderMethod using the given context, this returns a new go file with
// the Render method attached to the struct defined in ctx.
func GenerateRenderMethod(n *Node, ctx *Context) ([]byte, error) {
	var buf bytes.Buffer
	nstr := n.Print(0, false)
	buf.Reset()
	err := tpl.Execute(&buf, map[string]interface{}{
		"ctx":  ctx,
		"node": nstr,
	})
	if err != nil {
		return nil, err
	}
	return format.Source(buf.Bytes())
}
