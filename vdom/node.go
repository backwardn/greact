package vdom

import (
	"go/ast"
	"io"
	"strings"
	"text/template"

	"golang.org/x/net/html"
	"golang.org/x/net/html/atom"
)

const (
	// ContainerNode this is tha name of a node which acts as a container to a
	// slice of other nodes.
	ContainerNode = "__internal_container___"
)

type Attribute struct {
	Namespace, Key string
	Value          interface{}
}

type Node struct {
	Type      html.NodeType
	DataAtom  atom.Atom
	Data      string
	Namespace string
	Attr      []Attribute
	Children  []*Node
}

// Clone traverse n and copies the tree to e.
func Clone(n *html.Node, e *Node) {
	for c := n.FirstChild; c != nil; c = c.NextSibling {
		ch := &Node{
			Type:      c.Type,
			DataAtom:  c.DataAtom,
			Data:      c.Data,
			Namespace: c.Namespace,
			Attr:      make([]Attribute, len(c.Attr)),
		}
		for _, v := range c.Attr {
			ch.Attr = append(ch.Attr, Attribute{
				Namespace: v.Namespace,
				Key:       v.Key,
				Value:     v.Val,
			})
		}
		e.Children = append(e.Children, ch)
		Clone(c, ch)
	}
}

// Clear removes nodes injected by the parser.
func Clear(n *Node) *Node {
	if len(n.Children) > 0 && n.Children[0].DataAtom == atom.Html {
		// this is the root node. The html parser injects html,bead,body tags by
		// default.
		//
		// The plan here is to remove the injected  tags
		body := n.Children[0].Children[1]
		if len(body.Children) > 1 {
			// wrap the children in a container
			return &Node{
				Type:     html.ElementNode,
				Data:     ContainerNode,
				Children: body.Children,
			}
		}
		return body.Children[0]
	}
	return n
}

func nonilExpr(x ...ast.Expr) []ast.Expr {
	var ls []ast.Expr
	for _, v := range x {
		if v != nil {
			ls = append(ls, v)
		}
	}
	return ls
}

// Compile compiles src which is a jsx like syntax for describing ui into a
// *Node which is a tree of virtual.
func Compile(src string) (*Node, error) {
	doc, err := html.Parse(strings.NewReader(src))
	if err != nil {
		return nil, err
	}
	o := &Node{
		DataAtom: doc.DataAtom,
		Data:     doc.Data,
	}
	Clone(doc, o)
	return o, nil
}

func formatNodeType(n html.NodeType) string {
	switch n {
	case html.ErrorNode:
		return "ErrorNode"
	case html.TextNode:
		return "TextNode"
	case html.DocumentNode:
		return "DocumentNode"
	case html.ElementNode:
		return "ElementNode"
	case html.CommentNode:
		return "CommentNode"
	case html.DoctypeNode:
		return "DoctypeNode"
	default:
		return "ErrorNode"
	}
}

const fnTpl = `// Code generated by vected DO NOT EDIT.
package {{.ctx.Package}}

import (
	"github.com/gernest/vected/lib/vdom"
	vp "github.com/gernest/vected/lib/props"
	"golang.org/x/net/html/atom"
	"golang.org/x/net/html"
)

// Render implements vected.Renderer interface.
func ({{.ctx.Recv}} {{.ctx.StructName}})Render(props vp.Props)*vdom.Node{
	return {{.node}}
}
`

var tpl = template.Must(template.New("n").Parse(fnTpl))

type Context struct {
	Package    string
	Recv       string
	StructName string
}

// Parse parses src
func Parse(r io.Reader) (*Node, error) {
	doc, err := html.Parse(r)
	if err != nil {
		return nil, err
	}
	o := &Node{
		Data: doc.Data,
	}
	Clone(doc, o)
	return Clear(o), nil
}

// ParseString helper that wraps s to io.Reader.
func ParseString(s string) (*Node, error) {
	return Parse(strings.NewReader(s))
}
