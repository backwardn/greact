// Code generated by gnorm, DO NOT EDIT!

package keydbserverkeys

import (
	"github.com/pkg/errors"
	"gitlab.com/floridahq/florida/db"
)

// Row represents a row from 'keydb_server_keys'.
type Row struct {
	ServerName         string // server_name
	ServerKeyID        string // server_key_id
	ServerNameAndKeyID string // server_name_and_key_id
	ValidUntilTs       int64  // valid_until_ts
	ExpiredTs          int64  // expired_ts
	ServerKey          string // server_key
}

// Field values for every column in KeydbServerKeys.
var (
	ServerNameCol         db.StringField = "server_name"
	ServerKeyIDCol        db.StringField = "server_key_id"
	ServerNameAndKeyIDCol db.StringField = "server_name_and_key_id"
	ValidUntilTsCol       db.Int64Field  = "valid_until_ts"
	ExpiredTsCol          db.Int64Field  = "expired_ts"
	ServerKeyCol          db.StringField = "server_key"
)

// Query retrieves rows from 'keydb_server_keys' as a slice of Row.
func Query(db db.DB, where db.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		server_name, server_key_id, server_name_and_key_id, valid_until_ts, expired_ts, server_key
		FROM public.keydb_server_keys WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.ServerName, &r.ServerKeyID, &r.ServerNameAndKeyID, &r.ValidUntilTs, &r.ExpiredTs, &r.ServerKey)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// One retrieve one row from 'keydb_server_keys'.
func One(db db.DB, where db.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		server_name, server_key_id, server_name_and_key_id, valid_until_ts, expired_ts, server_key
		FROM public.keydb_server_keys WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.ServerName, &r.ServerKeyID, &r.ServerNameAndKeyID, &r.ValidUntilTs, &r.ExpiredTs, &r.ServerKey)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// Insert inserts the row into the database.
func Insert(db db.DB, r *Row) error {
	const sqlstr = `INSERT INTO keydb_server_keys (
			server_name, server_key_id, server_name_and_key_id, valid_until_ts, expired_ts, server_key
		) VALUES (
			$1, $2, $3, $4, $5, $6
		)`
	_, err := db.Exec(sqlstr, r.ServerName, r.ServerKeyID, r.ServerNameAndKeyID, r.ValidUntilTs, r.ExpiredTs, r.ServerKey)
	return errors.Wrap(err, "insert KeydbServerKeys")
}
