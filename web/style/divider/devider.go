package divider

import (
	"github.com/gernest/gs"
	"github.com/gernest/vected/style/themes"
)

const (
	BaseClass     = ".Divider"
	Vertical      = "Vertical"
	Horizontal    = "Horizontal"
	WithText      = "WithText"
	WithTextLeft  = "WithTextLeft"
	WithTextRight = "WithTextRight"
	InnerText     = "InnerText"
	Dashed        = "Dashed"
)

func Style() gs.CSSRule {
	borderSplitColor := themes.Default.BorderColorSplit.String()
	return gs.S(BaseClass,
		//reset component
		gs.P("font-family", themes.Default.FontFamily),
		gs.P("font-size", themes.Default.FontSizeBase),
		gs.P("line-height", themes.Default.LineHeightBase),
		gs.P("color", themes.Default.TextColor.String()),
		gs.P("box-sizing", "border-box"),
		gs.P("margin", "0"),
		gs.P("padding", "0"),
		gs.P("list-style", "none"),
		gs.P("background", borderSplitColor),
		gs.S("&",
			gs.P("margin", " 0 8px"),
			gs.P("display", "inline-block"),
			gs.P("width", "1px"),
			gs.P("vertical-align", "middle"),
			gs.P("position", "relative"),
			gs.P("top", "-0.06em"),
		),
		gs.S("&"+Vertical,
			gs.P("margin", " 0 8px"),
			gs.P("display", "inline-block"),
			gs.P("width", "1px"),
			gs.P("vertical-align", "middle"),
			gs.P("position", "relative"),
			gs.P("top", "-0.06em"),
		),
		gs.S("&"+Horizontal,
			gs.P("display", "block"),
			gs.P("height", "1px"),
			gs.P("width", "100%"),
			gs.P("margin", "24px 0"),
			gs.P("clear", "both"),
		),
		gs.S("&"+Horizontal+"&"+WithText,
			gs.P("display", "table"),
			gs.P("white-space", "nowrap"),
			gs.P("text-align", "center"),
			gs.P("background", "transparent"),
			gs.P("font-weight", "500"),
			gs.P("color", themes.Default.HeadingColor.Hex()),
			gs.P("font-size", themes.Default.FontSizeLG),
			gs.P("margin", "16px 0"),
			gs.S("&:before",
				gs.P("content", `''`),
				gs.P("display", "table-cell"),
				gs.P("position", "relative"),
				gs.P("top", "50%"),
				gs.P("width", "50%"),
				gs.P("border-top", "1px solid "+borderSplitColor),
				gs.P("transform", "translateY(50%)"),
			),
			gs.S("&:after",
				gs.P("content", `''`),
				gs.P("display", "table-cell"),
				gs.P("position", "relative"),
				gs.P("top", "50%"),
				gs.P("width", "50%"),
				gs.P("border-top", "1px solid "+borderSplitColor),
				gs.P("transform", "translateY(50%)"),
			),
		),
		gs.S("&"+InnerText,
			gs.P("display", "inline-block"),
			gs.P("padding", "0 24px"),
		),
		gs.S("&"+Horizontal+"&"+WithTextLeft,
			gs.P("display", "table"),
			gs.P("white-space", "nowrap"),
			gs.P("text-align", "center"),
			gs.P("background", "transparent"),
			gs.P("font-weight", "500"),
			gs.P("color", themes.Default.HeadingColor.Hex()),
			gs.P("font-size", themes.Default.FontSizeBase),
			gs.S("&:before",
				gs.P("content", `''`),
				gs.P("display", "table-cell"),
				gs.P("position", "relative"),
				gs.P("top", "50%"),
				gs.P("width", "5%"),
				gs.P("border-top", "1px solid "+borderSplitColor),
				gs.P("transform", "translateY(50%)"),
			),
			gs.S("&:after",
				gs.P("content", `''`),
				gs.P("display", "table-cell"),
				gs.P("position", "relative"),
				gs.P("top", "50%"),
				gs.P("width", "95%"),
				gs.P("border-top", "1px solid "+borderSplitColor),
				gs.P("transform", "translateY(50%)"),
			),
			gs.S("&"+InnerText,
				gs.P("display", "inline-block"),
				gs.P("padding", "0 10px"),
			),
		),
		gs.S("&"+Horizontal+"&"+WithTextRight,
			gs.P("display", "table"),
			gs.P("white-space", "nowrap"),
			gs.P("text-align", "center"),
			gs.P("background", "transparent"),
			gs.P("font-weight", "500"),
			gs.P("color", themes.Default.HeadingColor.Hex()),
			gs.P("font-size", themes.Default.FontSizeBase),
			gs.P("margin", "16px 0"),
			gs.S("&:before",
				gs.P("content", `''`),
				gs.P("display", "table-cell"),
				gs.P("position", "relative"),
				gs.P("top", "50%"),
				gs.P("width", "95%"),
				gs.P("border-top", "1px solid "+borderSplitColor),
				gs.P("transform", "translateY(50%)"),
			),
			gs.S("&:after",
				gs.P("content", `''`),
				gs.P("display", "table-cell"),
				gs.P("position", "relative"),
				gs.P("top", "50%"),
				gs.P("width", "5%"),
				gs.P("border-top", "1px solid "+borderSplitColor),
				gs.P("transform", "translateY(50%)"),
			),
			gs.S("&"+InnerText,
				gs.P("display", "inline-block"),
				gs.P("padding", "0 10px"),
			),
		),
		gs.S("&"+Dashed,
			gs.P("background", "none"),
			gs.P("border-top", "1px dashed "+borderSplitColor),
		),
		gs.S("&"+Horizontal+"&"+WithText+"&"+Dashed,
			gs.P("border-top", "0"),
			gs.S("&:before",
				gs.P("border-style", "dashed none none"),
			),
			gs.S("&:after",
				gs.P("border-style", "dashed none none"),
			),
		),
		gs.S("&"+Horizontal+"&"+WithTextLeft+"&"+Dashed,
			gs.P("border-top", "0"),
			gs.S("&:before",
				gs.P("border-style", "dashed none none"),
			),
			gs.S("&:after",
				gs.P("border-style", "dashed none none"),
			),
		),
		gs.S("&"+Horizontal+"&"+WithTextRight+"&"+Dashed,
			gs.P("border-top", "0"),
			gs.S("&:before",
				gs.P("border-style", "dashed none none"),
			),
			gs.S("&:after",
				gs.P("border-style", "dashed none none"),
			),
		),
	)
}
