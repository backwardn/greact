package style

import (
	"github.com/gernest/vected/lib/gs"
	"github.com/gernest/vected/web/style/core/themes"
	"github.com/gernest/vected/web/style/mixins"
)

var prefix = themes.Default.AntPrefix + "-badge"
var numberPrefix = themes.Default.AntPrefix + "-scroll-number"
var height = themes.Default.BadgeHeight
var dot = themes.Default.BadgeDotSize

// Badge returns stylesheet for antd badge.
func Badge() gs.CSSRule {
	return gs.CSS(
		gs.S(prefix,
			mixins.ResetComponent(),
			gs.P("position", "relative"),
			gs.P("display", "inline-block"),
			gs.P("line-height", "1"),
			gs.P("vertical-align", "middle"),
			gs.S("&-count ",
				gs.P("position", "absolute"),
				gs.P("transform", "translateX(-50%)"),
				gs.P("top", "-"+height.Div(gs.U("2")).String()),
				gs.P("height", height.String()),
				gs.P("border-radius", height.Div(gs.U("2")).String()),
				gs.P("min-width", height.String()),
				gs.P("background", themes.Default.HighlightColor.Hex()),
				gs.P("color", "#fff"),
				gs.P("line-height", height.String()),
				gs.P("text-align", "center"),
				gs.P("padding", "0 6px"),
				gs.P("font-size", themes.Default.BadgeFontSize.String()),
				gs.P("font-weight", themes.Default.BadgeFontWeight),
				gs.P("white-space", "nowrap"),
				gs.P("transform-origin", "-10% center"),
				gs.P("box-shadow", "0 0 0 1px #fff"),
				gs.S("& a, & a:hover",
					gs.P("color", "#fff"),
				),
			),
			gs.S("&-multiple-words",
				gs.P("padding", "0 8px"),
			),
			gs.S("&-dot",
				gs.P("position", "absolute"),
				gs.P("transform", "translateX(-50%)"),
				gs.P("transform-origin", "0 center"),
				gs.P("top", "-"+dot.Div(gs.U("2")).String()),
				gs.P("height", dot.String()),
				gs.P("width", dot.String()),
				gs.P("border-radius", "100%"),
				gs.P("background", themes.Default.HighlightColor.Hex()),
				gs.P("z-index", "10"),
				gs.P("box-shadow", "0 0 0 1px #fff"),
			),
			gs.S("&-status",
				gs.P("ine-height", "inherit"),
				gs.P("vertical-align", "baseline"),
				gs.S("&-dot",
					gs.P("width", themes.Default.BadgeStatusSize),
					gs.P("height", themes.Default.BadgeStatusSize),
					gs.P("display", "inline-block"),
					gs.P("border-radius", "50%"),
					gs.P("vertical-align", "middle"),
					gs.P("position", "relative"),
					gs.P("top", "-1px"),
				),
				gs.S("&-success",
					gs.P("background", themes.Default.SuccessColor.Hex()),
				),
				gs.S("&-processing",
					gs.P("background-color", themes.Default.ProcessingColor.Hex()),
					gs.P("position", "relative"),
					gs.S("&:after",
						gs.P("position", "absolute"),
						gs.P("top", "0"),
						gs.P("left", "0"),
						gs.P("width", "100%"),
						gs.P("height", "100%"),
						gs.P("border-radius", "50%"),
						gs.P("border", "1px solid "+themes.Default.ProcessingColor.Hex()),
						gs.P("content", "''"),
						gs.P("animation", "antStatusProcessing 1.2s infinite ease-in-out"),
					),
				),
				gs.S("&-default",
					gs.P("background-color", themes.Default.NormalColor.Hex()),
				),
				gs.S("&-error",
					gs.P("background-color", themes.Default.ErrorColor.Hex()),
				),
				gs.S("&-warning",
					gs.P("background-color", themes.Default.WarningColor.Hex()),
				),
				gs.S("&-text",
					gs.P("color", themes.Default.TextColor.String()),
					gs.P("font-size", themes.Default.FontSizeBase.String()),
					gs.P("margin-left", "8px"),
				),
			),
			gs.S("&-zoom-appear",
				gs.P("animation", "antZoomBadgeIn .3s "+themes.Default.EaseOutBack),
				gs.P("animation-fill-mode", "both"),
			),
			gs.S("&-zoom-enter",
				gs.P("animation", "antZoomBadgeIn .3s "+themes.Default.EaseOutBack),
				gs.P("animation-fill-mode", "both"),
			),
			gs.S("&-zoom-leave",
				gs.P("animation", "antZoomBadgeIn .3s "+themes.Default.EaseInBack),
				gs.P("animation-fill-mode", "both"),
			),
			gs.S("&-not-a-wrapper "+themes.Default.AntPrefix+"-scroll-number",
				gs.P("top", "auto"),
				gs.P("display", "block"),
				gs.P("position", "relative"),
			),
			gs.S(" &-not-a-wrapper "+prefix+"-count",
				gs.P("transform", "none"),
			),
		),

		gs.KeyFrame("antStatusProcessing",
			gs.Cond("0%",
				gs.P("transform", "scale(0.8)"),
				gs.P("opacity", "0.5"),
			),
			gs.Cond("100%",
				gs.P("transform", "scale(2.4)"),
				gs.P("opacity", "0"),
			),
		),
		gs.S(numberPrefix,
			gs.P("overflow", "hidden"),
			gs.S("&-only",
				gs.P("display", "inline-block"),
				gs.P("transition", "all .3s "+themes.Default.EaseInOut),
				gs.P("height", height.String()),
				gs.S("> p",
					gs.P("height", height.String()),
					gs.P("margin", "0"),
				),
			),
		),
		gs.KeyFrame("antZoomBadgeIn",
			gs.Cond("0%",
				gs.P("opacity", "0"),
				gs.P("transform", "scale(0) translateX(-50%)"),
			),
			gs.Cond("100%",
				gs.P("transform", "scale(1) translateX(-50%)"),
			),
		),
		gs.KeyFrame("antZoomBadgeOut",
			gs.Cond("0%",
				gs.P("transform", "scale(1) translateX(-50%)"),
			),
			gs.Cond("100%",
				gs.P("opacity", "0"),
				gs.P("transform", "scale(0) translateX(-50%)"),
			),
		),
	)
}
